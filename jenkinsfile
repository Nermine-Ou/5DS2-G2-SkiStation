pipeline {
    agent any
    environment {
        SONARQUBE_ENV = 'sonarqube'
        SONAR_TOKEN = credentials('sonar-credentials')
        DOCKER_IMAGE = 'chaker-course-ski'  
        IMAGE_TAG = 'latest'  
    }
    stages{
         stage('CHECKOUT GIT'){
           steps {
                  //bat "git clone]https://gitlab.com/ThourayaLouati/docker-spring-boot/"
                  git branch: 'Course', url: 'https://github.com/Nermine-Ou/5DS2-G2-SkiStation.git';
       
                }
             
        }
        stage('clean build && Unit Tests ') {
            
            steps {
                script {
                    sh 'mvn clean install'
                }
            }
        }
         
         stage('Static analysis SONARQUBE') {
            steps {
                script {
                    withSonarQubeEnv("${SONARQUBE_ENV}") {
                        sh """
                            mvn sonar:sonar \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.coverage.jacoco.xmlReportPaths=/target/site/jacoco/jacoco.xml
                        """
                    }
                }
            }
        }
        stage('Upload to Nexus') {
            steps {
                script {
                    echo "Deploying to Nexus..."
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: "172.10.0.140:8081/",
                        groupId: 'tn.esprit.spring',
                        artifactId: 'gestion-station-ski',
                        version: '1.1',
                        repository: "maven-central-repository",
                        credentialsId: "nexus-credentials",
                        artifacts: [
                            [
                                artifactId: 'gestion-station-ski',
                                classifier: '',
                                file: 'target/gestion-station-ski.jar', 
                                type: 'jar'
                            ]
                        ]
                    )
                    echo "Deployment to Nexus completed!"
                }
            }
        }
         stage('Build Docker Image') {
            steps {
                script {
                    
                        def nexusUrl = "http://172.10.0.140:8081/"
                        def groupId = "tn.esprit.spring"
                        def artifactId = "gestion-station-ski"
                        def version = "1.0"
                        sh """
                            docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} \
                            --build-arg NEXUS_URL=${nexusUrl} \
                            --build-arg GROUP_ID=${groupId} \
                            --build-arg ARTIFACT_ID=${artifactId} \
                            --build-arg VERSION=${version} .
                        """
                    
                }
            }
        }
        stage('Push Docker Image') {
            environment {
                DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
            }
            steps {
                script {
                    
                        withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                            sh "docker tag ${DOCKER_IMAGE}:${IMAGE_TAG} $DOCKER_USERNAME/${DOCKER_IMAGE}:${IMAGE_TAG}"
                            sh "docker push $DOCKER_USERNAME/${DOCKER_IMAGE}:${IMAGE_TAG}"
                        
                    }
                }
            }
        }
   
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}